#!/usr/bin/env bash

# =========================================================
# Globals & system overrids
# =========================================================
alias brew="brew -v"
alias cp='cp -v'
alias ctt='pygmentize -O style=monokai -f console256 -g'
alias ctt2='pygmentize -O style=monokai -g'
ct () { ctt "$@" | cat -n | sed 's/^[ 0-9]*[0-9]/\o033[34m&\o033[0m/' | less -R }
cs () { cat "$@" | jase scripts | pygmentize -l json }

alias h="history | fzf --reverse"
alias mkdir='mkdir -pv'
alias mv='mv -v'
alias path='echo -e ${PATH//:/\\n}'
alias pgrep='pgrep -fli'
alias rm='rm -v'
alias serve='http-server'
alias wget='wget --no-check-certificate'
alias nx='PATH=$(npm bin):$PATH'
alias crontab='VISUAL=nano EDITOR=nano crontab'
#alias npm_='/usr/local/bin/npm'
#alias _npm='/usr/local/bin/npm'
wh () { which -a "$@" | ctt2 }

# function npm {
#   shift; 
#   case "$1" in

#     i|install)
#       yarn add "$@"
#       ;;
    
#     *)
#     _npm "$@"
#     ;;
#   esac
# }

function git2 {
   local tmp=$(mktemp -t git)
   local repo_name

   if [ "$1" = clone ] ; then
     command hub "$@" --progress 2>&1 | tee $tmp
     repo_name=$(awk -F\' '/Cloning into/ {print $2}' $tmp)
     rm $tmp &> /dev/null
     cd "$repo_name"
     echo "" && hub log --oneline --graph --date=short -n 1 && echo ""
   else
     command hub "$@"
   fi
}




# =========================================================
# GOTO aliases
# =========================================================
alias -- -="cd -"
alias dl="cd $HOME/Downloads"
alias dt="cd $HOME/Desktop"
alias c="cd $HOME/code"
alias dj='cd $HOME/.dotjitsu && code .'

append() {
  grep -q -F $1 $2 || echo $1 >> $2
}

#alias ls='ls --color --group-directories-first'
alias l='ls -lah'        # Lists in one column, hidden files.
alias l='ls -a'          # Lists in multi column, hidden files.
alias ll='ls -lah'       # Lists human readable sizes.
alias lr='ll -R'         # Lists human readable sizes, recursively.
alias la='ll -A'         # Lists human readable sizes, hidden files.
alias lm='la | "$PAGER"' # Lists human readable sizes, hidden files through pager.
alias lx='ll -XB'        # Lists sorted by extension (GNU only).
alias lk='ll -Sr'        # Lists sorted by size, largest last.
alias lt='ll -tr'        # Lists sorted by date, most recent last.
alias lc='lt -c'         # Lists sorted by date, most recent last, shows change time.
alias lu='lt -u'         # Lists sorted by date, most recent last, shows access time.
alias sl='ls'            # I often screw this up.

connected_display () {
  xrandr -q | grep " connected" | ack -ho '(^\w+)'
}
brightness() {
  local input=$1
  xrandr --output `connected_display` --brightness $input
}

# =========================================================
# Gnu utils (to enforce presedence)
# =========================================================


# =========================================================
# Others
# =========================================================
alias speedtest="speedtest-cli"

# =========================================================
# Boilerplate shortcuts
# =========================================================

# Create directory and immediately move into that dir
mk () { mkdir -p $1; cd $1 }

# Opens file in EDITOR.
edit () {
  local dir=$1
  [[ -z "$dir" ]] && dir='.'
  $EDITOR $dir
}

alias e='edit'

# Reload .zshrc
zr () {
  source $HOME/.zshrc
}


# Case-insensitive pgrep that outputs full path.
brew.info () {
  grep desc $(brew --prefix)/Library/Formula/*.rb | perl -ne 'm{^.*/(.*?)\.rb.*?\"(.*)"$} and print "$1|$2\n"' | column -t -s '|' | fzf --reverse
}


if (( $+commands[http] )); then
  alias GET='http GET'
  # alias HEAD='http -I'
  # alias POST='http POST'
  # alias PUT='http PUT'
  # alias PATCH='http PATCH'
  # alias DELETE='http DELETE'
  # alias OPTIONS='http OPTIONS'
fi



# =========================================================
# Cli Tricks
# =========================================================
alias history.stat="history 0 | awk '{print \$2}' | sort | uniq -c | sort -n -r | head"

die () {
    [[ -n "$1" ]] && echo "$1"
    [[ -n "$2" ]] && exit $2 || exit 1
}


# =========================================================
# OSX tricks
# =========================================================

# Open curr dir in preview.app.
open.preview () {
  local item=$1
  [[ -z "$item" ]] && item='.'
  open $1 -a 'Preview'
}

# Show current Finder directory.
finder.currentdir () {
  osascript 2>/dev/null <<EOF
    tell application "Finder"
      return POSIX path of (target of window 1 as alias)
    end tell
EOF
}


# =========================================================
# SSH
# =========================================================
alias ssh.pubkey="more ~/.ssh/id_rsa.pub | pbcopy | echo '=> Public key copied to pasteboard.'"
alias ssh.keygen='ssh-keygen -t rsa -N "" -f ~/.ssh/id_rsa; ssh.pubkey'
alias pubkey="ssh.pubkey"

ssh.addkey () {
  ssh $1 "mkdir -p ~/.ssh && cat >> ~/.ssh/authorized_keys" < ~/.ssh/id_?sa.pub  # '?sa' is a glob, not a typo!
  echo "sshkey done."
}


# =========================================================
# GIT
# =========================================================
# Checkout git branches
git.co () {
  local branches branch
  branches=$(git branch -a) &&
  branch=$(echo "$branches" | fzf +s +m -x --reverse) &&
  git checkout $(echo "$branch" | sed "s:.* remotes/origin/::" | sed "s:.* ::")
}
alias co='git.co'

# =========================================================
# CD
# =========================================================
# cd to the default working directory set by current_working_project
chdir.default () {
  export wdir=`cat $HOME/.tmp/current_project_path`
  echo "Change current working project to $wdir"
  cd $wdir
}

chdir.set () {
  cwd=pwd > $HOME/.tmp/current_project_path
  echo "Set current working project to `$cwd`"
}

chdir.rm () {
  echo "Remove current working project: `cat $HOME/.tmp/current_project_path`"
  '~' >> $HOME/.tmp/current_project_path
}

# =========================================================
# System stuff
# =========================================================

# Load 8 cores at once.
system.maxcpu () {
  dn=/dev/null
  yes > $dn & yes > $dn & yes > $dn & yes > $dn &
  yes > $dn & yes > $dn & yes > $dn & yes > $dn &
}

ps.kill () { kill -9 `ps ax | grep $1 | grep -v grep | awk '{print $1}'` }

# =========================================================
# Lists (with fzf magic)
# =========================================================

# List of available VM's -Â with fbr magic
vm () {
  vm=$(VBoxManage list vms | fzf +s +m -e --reverse) &&
  uuid=$(echo "$vm" | ack --cc '{([a-z0-9\-]+)}' --output '$1') &&
  VBoxManage startvm $uuid
}


# =========================================================
# File related stuff
# =========================================================
file.size () { wc -c < $1 }

# Monitor IO in real-time (open files etc).
# files.open () {
#   sudo dtrace -n 'syscall::open*:entry { printf("%s %s",execname,copyinstr(arg0)); }'
# }

# Files used, anywhere on the filesystem
#alias files.usage='sudo fs_usage -e -f filesystem|grep -v CACHE_HIT|grep -v grep'
# Files being opened (OSX Only)
#alias files.open='sudo fs_usage -e -f filesystem|grep -v CACHE_HIT|grep -v grep|grep open'
# Files in use in the Users directory
#alias files.usage.user='sudo fs_usage -e -f filesystem|grep -v CACHE_HIT|grep -v grep|grep Users'

ddd() {
  local cmd="dd if='"$1"' | pv | sudo dd of=/dev/rdisk"$2" bs=1m"
  echo $cmd
  sudo sh -c "$cmd"
}

# =========================================================
# Network stuff
# =========================================================

# Sniff network info.
alias ip.public='dig +short myip.opendns.com @resolver1.opendns.com'
function ip.internal { ifconfig | grep "inet " | grep -v 127.0.0.1 | awk '{print $2}' }
alias ip='ip.internal; ip.public'
alias net.connections='lsof -l -i +L -R -V'
alias net.established='lsof -l -i +L -R -V | grep ESTABLISHED'
alias net.available_ip="ping -t 1 255.255.255.255 > /dev/null; arp -a"
alias net.sockets_numerical='netstat -tulpn'
alias net.sockets_services='netstat -tulp'
alias net.sniff0="sudo ngrep -d 'en0' -t '^(GET|POST) ' 'tcp and port 80'"
alias net.sniff1="sudo ngrep -d 'en1' -t '^(GET|POST) ' 'tcp and port 80'"
alias net.sniff4="sudo ngrep -d 'en4' -t '^(GET|POST) ' 'tcp and port 80'"
alias net.flushdns='dscacheutil -flushcache'
alias flushdns='net.flushdns'

# =========================================================
# Compression
# =========================================================

z1 () {
  local input=$1; local output=${2:-$1}.tar.gz
  tar cf - $input | pv -s $(du -sk $input | awk '{print $input*1024}') | pigz -c -9 > $output
}

z2 () {
  local input=$1; local output=${2:-$1}.tar.lz
  tar cf - $input | pv -s $(du -sk $input | awk '{print $input*1024}') | plzip -c -9 > $output
}

z3 () {
  local input=$1; local output=${2:-$1}.tar.bz2
  tar cf - $input | pv -s $(du -sk $input | awk '{print $input*1024}') | pbzip2 -c -9 > $output
}

xtract () {
 if [ -z "$1" ]; then
    # display usage if no parameters given
    echo "Usage: extract <path/file_name>.<zip|rar|bz2|gz|tar|tbz2|tgz|Z|7z|xz|ex|tar.bz2|tar.gz|tar.xz>"
 else
    if [ -f $1 ] ; then
        # NAME=${1%.*}
        # mkdir $NAME && cd $NAME
        case $1 in
          *.tar.bz2)   tar xvjf ../$1    ;;
          *.tar.gz)    tar xvzf ../$1    ;;
          *.tar.xz)    tar xvJf ../$1    ;;
          *.lzma)      unlzma ../$1      ;;
          *.bz2)       bunzip2 ../$1     ;;
          *.rar)       unrar x -ad ../$1 ;;
          *.gz)        gunzip ../$1      ;;
          *.tar)       tar xvf ../$1     ;;
          *.tbz2)      tar xvjf ../$1    ;;
          *.tgz)       tar xvzf ../$1    ;;
          *.zip)       unzip ../$1       ;;
          *.Z)         uncompress ../$1  ;;
          *.7z)        7z x ../$1        ;;
          *.xz)        unxz ../$1        ;;
          *.exe)       cabextract ../$1  ;;
          *)           echo "extract: '$1' - cannot be extracted via extract()" ;;
        esac
    else
        echo "$1 - file does not exist"
    fi
fi
}


# =========================================================
# Useful file size aliases
# =========================================================

randfile () {
  local size=$1
  time openssl rand $size | head -c $size > $size.bin
}

# 1500 -> 1.500
to_kb () {
  echo $(bc <<< "scale=3; $1/1000")
}

# 10000 -> 10,000
format_number () {
  printf "%'.3f\n" $1
}

# ./some_file.txt -> 11496328
size_in_bytes () {
  stat -f %z "$1"
}

# ./some_file.txt -> 11,496.328 KB
echo_size () {
  echo $(format_number $(to_kb $(size_in_bytes "$1")))"kB"
}
